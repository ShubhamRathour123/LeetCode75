class Solution 
{
    int count = 0;
    void dfs(int node, int parent, List<List<Pair<Integer, Integer>>> adj) 
    {
        for (Pair<Integer, Integer> pair : adj.get(node)) 
        {
            int child = pair.getKey();
            int sign = pair.getValue();
            if (child != parent) 
            {
                count += sign;
                dfs(child, node, adj);
            }
        }
    }
    int minReorder(int n, int[][] connections) 
    {
        List<List<Pair<Integer, Integer>>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) 
        {
            adj.add(new ArrayList<>());
        }
        for (int[] connection : connections) 
        {
            adj.get(connection[0]).add(new Pair<>(connection[1], 1));
            adj.get(connection[1]).add(new Pair<>(connection[0], 0));
        }
        dfs(0, -1, adj);
        return count;
    }
    class Pair<K, V> 
    {
        private final K key;
        private final V value;
        public Pair(K key, V value) 
        {
            this.key = key;
            this.value = value;
        }
        public K getKey() 
        {
            return key;
        }
        public V getValue() 
        {
            return value;
        }
    }
}
